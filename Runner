import java.awt.*;
import java.awt.event.*;
import javax.swing.OverlayLayout;
import java.awt.GridLayout;
import java.util.ArrayList;
import javax.swing.*;
import java.awt.image.BufferedImage;
import java.io.File;
import javax.imageio.ImageIO;
/**
 * Write a description of class Runner here.
 * 
 * @author (Michael Bagamian) 
 * @version (5/18/17)
 */
public class Runner
{
    private static final int FRAME_WIDTH = 3000;
    private static final int FRAME_HEIGHT = 1000;
    private static ArrayList<BalloonGUI>  balloonList = new ArrayList<BalloonGUI>();
    public static void main(String[] args)
    {
        JFrame frame = new JFrame();
        JFrame frameFirst=new JFrame("Welcome to the Balloon Game!");
        frameFirst.setVisible(true);
        frameFirst.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frameFirst.setSize(FRAME_WIDTH, FRAME_HEIGHT);        
        JPanel paneFirst=new JPanel();
        JButton playGame=new JButton("Play Now");
        JButton tutorial=new JButton("How To Play");
        //paneFirst.setLayout(new OverlayLayout(paneFirst));
        paneFirst.add(playGame);
        frameFirst.add(paneFirst);
        JPanel pane=new JPanel();                        
        class Action implements ActionListener
        {
            public void actionPerformed(ActionEvent e)
            {
                /*JFrame frameSecond=new JFrame("Game");
                frameSecond.setVisible(true);
                frameSecond.setSize(FRAME_WIDTH, FRAME_HEIGHT);
                JPanel paneSecond=new JPanel();
                frameSecond.add(paneSecond);*/
                BalloonGUI component = new BalloonGUI();
                String letter=component.getArray()[component.getVal()].toUpperCase();
                char let=letter.charAt(0);
                //System.out.print(letter);
                //JTextField text=new JTextField(3000);
                /*GridBagConstraints c = new GridBagConstraints();
                c.gridwidth = GridBagConstraints.REMAINDER;
                c.insets = new Insets(10, 10, 10, 10);
                c.fill = GridBagConstraints.HORIZONTAL;               
                c.gridx = 0;
                c.gridy = 25;                
                pane.add(text,c);*/
                LayoutManager overlay=new OverlayLayout(pane);
                pane.setLayout(overlay);
                frame.setSize(FRAME_WIDTH, FRAME_HEIGHT);
                SpikeBarBackgroundGUI sBB = new SpikeBarBackgroundGUI();                                      
                pane.add(sBB);    
                pane.add(component);
                pane.setFocusable(true);
                pane.requestFocusInWindow();
                pane.setFocusTraversalKeysEnabled(false);
                ImageIcon imageIcon = new ImageIcon("stockvault-sky1420691.jpg"); //url: https://fmirentals.com/weather-temps/
                Image imag = imageIcon.getImage();
                Image img2 = imag.getScaledInstance(FRAME_WIDTH,FRAME_HEIGHT, java.awt.Image.SCALE_SMOOTH); 
                ImageIcon img=new ImageIcon(img2);
                JLabel image=new JLabel(img);
                pane.add(image,BorderLayout.CENTER);
                frame.add(pane);
                frame.setTitle("Balloons Moving");
                frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);       
                frame.setVisible(true);
 
                class TimerListener implements ActionListener
                {
                    public void actionPerformed(ActionEvent event)
                    {
                        component.moveBy(0, 1);
                        frame.repaint();
                    }
                }
                
                class Keys implements KeyListener
                {
                    public void keyPressed(KeyEvent e)
                    {
                        if(/*component.getY()>=75 && component.getY()<=175 &&*/  e.getKeyCode()==KeyEvent.getExtendedKeyCodeForChar(let))
                        {
                            pane.remove(component);
                            frame.repaint();
                        }
                    }
 
                    public void keyTyped(KeyEvent e)
                    {
 
                    }
 
                    public void keyReleased(KeyEvent e)
                    {
 
                    }
                }
                ActionListener listener = new TimerListener();
                pane.addKeyListener(new Keys());
                final int DELAY = 10; // Milliseconds between timer ticks
                Timer t = new Timer(DELAY, listener);
                t.start();
            }
        } 
        playGame.addActionListener(new Action());        
    }
}
 
 
 




